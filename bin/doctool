#!/usr/bin/env bash

# Build script untuk membuat Docker images
set -e

# Default values
REGISTRY=""
APP_NAME="app"
PHP_VERSION="${PHP_VERSION:-8.3}"
APP_VERSION="v1.0.0"

# Parse arguments
while [ $# -gt 0 ]; do
  case $1 in
    --registry)
      REGISTRY="$2"
      shift 2
      ;;
    --php-version)
      PHP_VERSION="$2"
      shift 2
      ;;
    --app-version)
      APP_VERSION="$2"
      shift 2
      ;;
    --app-name)
      APP_NAME="$2"
      shift 2
      ;;
    --help)
      echo "Usage: $0 [--registry REGISTRY] [--php-version VERSION] [--app-version VERSION] [--app-name NAME]"
      echo "  --registry: Docker registry (e.g., gcr.io/my-project)"
      echo "  --php-version: PHP version (default: 8.3, supports: 8.1, 8.2, 8.3, 8.4)"
      echo "  --app-version: Application version (default: v1.0.0)"
      echo "  --app-name: Application/service name (default: app)"
      echo "              Supports namespace format: 'namespace/app' or simple name: 'app'"
      echo ""
      echo "Multi-tag Strategy:"
      echo "Each build creates 2 tags per image type for flexible versioning:"
      echo "  1. Latest:          app-php8.3             (overall latest version)"
      echo "  2. Major:           v2-app-php8.3          (latest minor in v2.x.x series)"
      echo ""
      echo "Examples:"
      echo "  \$0                                    # Build v1.0.0 with 2 tags each"
      echo "  \$0 --php-version 8.3 --app-version v2.1.0  # Build v2.1.0 with semantic tags"
      echo "  \$0 --app-name myapp --app-version v1.5.0    # Build with 'myapp' name"
      echo "  \$0 --registry docker.io/myorg --app-name backend # Build and push all tags"
      echo ""
      echo "Environment variables:"
      echo "  PHP_VERSION: Set default PHP version (e.g., export PHP_VERSION=8.3)"
      exit 0
      ;;
    *)
      echo "Unknown option $1"
      exit 1
      ;;
  esac
done

# Validate PHP version
case "$PHP_VERSION" in
  8.1|8.2|8.3|8.4)
    # Valid PHP version
    ;;
  *)
    echo "❌ Error: PHP version '$PHP_VERSION' is not supported."
    echo "✅ Supported PHP versions: 8.1, 8.2, 8.3, 8.4"
    echo ""
    echo "Please use one of the supported versions:"
    echo "  ./vendor/bin/doctool --php-version 8.1"
    echo "  ./vendor/bin/doctool --php-version 8.2"
    echo "  ./vendor/bin/doctool --php-version 8.3"
    echo "  ./vendor/bin/doctool --php-version 8.4"
    exit 1
    ;;
esac

# Function to generate semantic version tags
generate_version_tags() {
  local app_version="$1"
  local image_type="$2"
  local php_version="$3"

  # Extract version parts (remove 'v' prefix if exists)
  local version_clean=$(echo "$app_version" | sed 's/^v//')
  local major=$(echo "$version_clean" | cut -d. -f1)

  # Generate all tag variations
  local tags=""

  # 1. Latest tag: http-php8.3 (points to overall latest)
  tags="$tags ${image_type}-php${php_version}"

  # 2. Major tag: v2-http-php8.3 (points to latest minor.patch)
  if [ -n "$major" ]; then
    tags="$tags v${major}-${image_type}-php${php_version}"
  fi

  echo "$tags"
}

# Generate tags for each image type
HTTP_TAGS=$(generate_version_tags "$APP_VERSION" "http" "$PHP_VERSION")
ARTISAN_TAGS=$(generate_version_tags "$APP_VERSION" "artisan" "$PHP_VERSION")

# Get primary tags (first tag in each list) for image naming
HTTP_TAG=$(echo $HTTP_TAGS | cut -d' ' -f1)
ARTISAN_TAG=$(echo $ARTISAN_TAGS | cut -d' ' -f1)

if [ -n "$REGISTRY" ]; then
    case "$REGISTRY" in
        docker.io/*)
            # For Docker Hub, use format: username/repository:tag
            REGISTRY_CLEAN=$(echo $REGISTRY | sed 's|docker.io/||')

            # Handle namespace in app name (e.g., namespace/app)
            case "$APP_NAME" in
                */*)
                    # App name already contains namespace, use as-is without registry prefix
                    HTTP_IMAGE="${APP_NAME}:${HTTP_TAG}"
                    ARTISAN_IMAGE="${APP_NAME}:${ARTISAN_TAG}"
                    ;;
                *)
                    # Simple app name, combine with registry namespace
                    HTTP_IMAGE="${REGISTRY_CLEAN}/${APP_NAME}:${HTTP_TAG}"
                    ARTISAN_IMAGE="${REGISTRY_CLEAN}/${APP_NAME}:${ARTISAN_TAG}"
                    ;;
            esac
            ;;
        *)
            # For other registries, always use namespace format
            HTTP_IMAGE="${REGISTRY}/${APP_NAME}:${HTTP_TAG}"
            ARTISAN_IMAGE="${REGISTRY}/${APP_NAME}:${ARTISAN_TAG}"
            ;;
    esac
else
    # Local images - use app name as-is (supports namespace)
    HTTP_IMAGE="${APP_NAME}:${HTTP_TAG}"
    ARTISAN_IMAGE="${APP_NAME}:${ARTISAN_TAG}"
fi

echo "Building Docker images"
echo "Application Name: $APP_NAME"
echo "Application Version: $APP_VERSION"
echo "PHP Version: $PHP_VERSION"
echo "HTTP Image: $HTTP_IMAGE"
echo "Artisan Image: $ARTISAN_IMAGE"
echo ""

# Build HTTP server image
echo "Building HTTP server image..."
docker build --target http \
  --build-arg PHP_VERSION="$PHP_VERSION" \
  -t "$HTTP_IMAGE" \
  -f docker/Dockerfile .

# Create additional tags for HTTP image
echo "Creating additional tags for HTTP image..."
for tag in $HTTP_TAGS; do
  if [ "$tag" != "$HTTP_TAG" ]; then
    if [ -n "$REGISTRY" ]; then
      case "$REGISTRY" in
        docker.io/*)
          REGISTRY_CLEAN=$(echo $REGISTRY | sed 's|docker.io/||')
          case "$APP_NAME" in
            */*)
              docker tag "$HTTP_IMAGE" "${APP_NAME}:${tag}"
              ;;
            *)
              docker tag "$HTTP_IMAGE" "${REGISTRY_CLEAN}/${APP_NAME}:${tag}"
              ;;
          esac
          ;;
        *)
          docker tag "$HTTP_IMAGE" "${REGISTRY}/${APP_NAME}:${tag}"
          ;;
      esac
    else
      docker tag "$HTTP_IMAGE" "${APP_NAME}:${tag}"
    fi
  fi
done

# Build Artisan image
echo "Building Artisan image..."
docker build --target artisan \
  --build-arg PHP_VERSION="$PHP_VERSION" \
  -t "$ARTISAN_IMAGE" \
  -f docker/Dockerfile .

# Create additional tags for Artisan image
echo "Creating additional tags for Artisan image..."
for tag in $ARTISAN_TAGS; do
  if [ "$tag" != "$ARTISAN_TAG" ]; then
    if [ -n "$REGISTRY" ]; then
      case "$REGISTRY" in
        docker.io/*)
          REGISTRY_CLEAN=$(echo $REGISTRY | sed 's|docker.io/||')
          case "$APP_NAME" in
            */*)
              docker tag "$ARTISAN_IMAGE" "${APP_NAME}:${tag}"
              ;;
            *)
              docker tag "$ARTISAN_IMAGE" "${REGISTRY_CLEAN}/${APP_NAME}:${tag}"
              ;;
          esac
          ;;
        *)
          docker tag "$ARTISAN_IMAGE" "${REGISTRY}/${APP_NAME}:${tag}"
          ;;
      esac
    else
      docker tag "$ARTISAN_IMAGE" "${APP_NAME}:${tag}"
    fi
  fi
done

echo "Build completed successfully!"
echo ""

# Push to registry if specified
if [ -n "$REGISTRY" ]; then
  echo "Pushing images to registry..."

  # Push HTTP image with all tags
  echo "Pushing HTTP image tags..."
  for tag in $HTTP_TAGS; do
    case "$REGISTRY" in
      docker.io/*)
        REGISTRY_CLEAN=$(echo $REGISTRY | sed 's|docker.io/||')
        case "$APP_NAME" in
          */*)
            docker push "${APP_NAME}:${tag}"
            ;;
          *)
            docker push "${REGISTRY_CLEAN}/${APP_NAME}:${tag}"
            ;;
        esac
        ;;
      *)
        docker push "${REGISTRY}/${APP_NAME}:${tag}"
        ;;
    esac
  done

  # Push Artisan image with all tags
  echo "Pushing Artisan image tags..."
  for tag in $ARTISAN_TAGS; do
    case "$REGISTRY" in
      docker.io/*)
        REGISTRY_CLEAN=$(echo $REGISTRY | sed 's|docker.io/||')
        case "$APP_NAME" in
          */*)
            docker push "${APP_NAME}:${tag}"
            ;;
          *)
            docker push "${REGISTRY_CLEAN}/${APP_NAME}:${tag}"
            ;;
        esac
        ;;
      *)
        docker push "${REGISTRY}/${APP_NAME}:${tag}"
        ;;
    esac
  done

  echo "All image tags pushed successfully!"
  echo ""
fi

echo "Available images with all tags:"
echo ""
echo "HTTP Server tags:"
for tag in $HTTP_TAGS; do
  if [ -n "$REGISTRY" ]; then
    case "$REGISTRY" in
      docker.io/*)
        REGISTRY_CLEAN=$(echo $REGISTRY | sed 's|docker.io/||')
        case "$APP_NAME" in
          */*)
            echo "  ${APP_NAME}:${tag}"
            ;;
          *)
            echo "  ${REGISTRY_CLEAN}/${APP_NAME}:${tag}"
            ;;
        esac
        ;;
      *)
        echo "  ${REGISTRY}/${APP_NAME}:${tag}"
        ;;
    esac
  else
    echo "  ${APP_NAME}:${tag}"
  fi
done

echo ""
echo "Artisan tags:"
for tag in $ARTISAN_TAGS; do
  if [ -n "$REGISTRY" ]; then
    case "$REGISTRY" in
      docker.io/*)
        REGISTRY_CLEAN=$(echo $REGISTRY | sed 's|docker.io/||')
        case "$APP_NAME" in
          */*)
            echo "  ${APP_NAME}:${tag}"
            ;;
          *)
            echo "  ${REGISTRY_CLEAN}/${APP_NAME}:${tag}"
            ;;
        esac
        ;;
      *)
        echo "  ${REGISTRY}/${APP_NAME}:${tag}"
        ;;
    esac
  else
    echo "  ${APP_NAME}:${tag}"
  fi
done
echo ""
echo "Usage examples:"
echo "  Docker Compose: docker-compose up -d"
echo "  HTTP Server: docker run -p 8080:8080 $HTTP_IMAGE"
echo "  Artisan Command: docker run $ARTISAN_IMAGE php artisan queue:work"
